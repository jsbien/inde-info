#!/usr/bin/python
# encoding=UTF-8

# Copyright © 2011 Jakub Wilk <jwilk@jwilk.net>
# Copyright © 2012 Tomasz Olejniczak <tomek.87@poczta.onet.pl>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 dated June, 1991.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.

import argparse
import logging
import re
import os
import sys
import xml.etree.cElementTree as etree

try:
    import icu
except ImportError:
    try:
        import PyICU as icu
    except ImportError, ex:
        ex.args = '%s; please install the PyICU package <http://pyicu.osafoundation.org/>' % str(ex),
        raise

try:
    import djvu.sexpr
    import djvu.const
except ImportError, ex:
    ex.args = '%s; please install the python-djvulibre package <http://jwilk.net/software/python-djvulibre>' % str(ex),
    raise

__version__ = '0.1.0'

INFINITY = 1e9999

page_type_to_djvu_type = dict(
    glyph=djvu.const.TEXT_ZONE_CHARACTER,
    word=djvu.const.TEXT_ZONE_WORD,
    line=djvu.const.TEXT_ZONE_LINE,
    paragraph=djvu.const.TEXT_ZONE_PARAGRAPH,
).get

_page_type_to_hocr_class = dict(
    #glyph=NotImplemented,
    glyph='ocrx_glyph',
    word='ocrx_word',
    line='ocrx_line',
    paragraph='ocr_par',
)

IN_FILE = 1
NOT_IN_FILE = 0

hocr_capabilities = ' '.join(sorted(cap for cap in _page_type_to_hocr_class.itervalues() if isinstance(cap, str)))

hocr_header = '''\
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta name="ocr-system" content="pageparser %(__version__)s" />
  <meta name="ocr-capabilities" content="%(hocr_capabilities)s ocrp_font" />
  <title>Hidden text layer</title>
</head>
<body>
''' % locals()
hocr_footer = '''
</body>
</html>
'''

def page_type_to_hocr_class(tp):
    try:
        return _page_type_to_hocr_class[tp]
    except KeyError:
        return 'ocrx_' + tp.replace('-', '_')

class Point(object):

    def __init__(self, x, y):
        assert isinstance(x, int)
        assert isinstance(y, int)
        self.x = x
        self.y = y

    def __repr__(self):
        return 'Point(%r, %r)' % (self.x, self.y)

class Polygon(object):

    def __init__(self, points):
        self.points = []
        self.x0 = +INFINITY
        self.y0 = +INFINITY
        self.x1 = -INFINITY
        self.y1 = -INFINITY
        for point in points:
            assert isinstance(point, Point)
            self.x0 = min(self.x0, point.x)
            self.y0 = min(self.y0, point.y)
            self.x1 = max(self.x1, point.x)
            self.y1 = max(self.y1, point.y)
            self.points += [point]

    def as_djvu(self, height):
        return djvu.sexpr.Expression([self.x0, height - self.y1, self.x1, height - self.y0])

    def as_hocr(self, **kwargs):
        return "bbox %d %d %d %d" % (self.x0, self.y0, self.x1, self.y1)

    def to_string(self, **kwargs):
        return "%d %d %d %d" % (self.x0, self.y0, self.x1, self.y1)

    def __repr__(self):
        return 'Polygon(%r)' % self.points
    
    def plus(self, polygon):
        self.x0 = min(self.x0, polygon.x0)
        self.y0 = min(self.y0, polygon.y0)
        self.x1 = max(self.x1, polygon.x1)
        self.y1 = max(self.y1, polygon.y1)

class ReadingOrder(object):

    def __init__(self, mapping):
        self._mapping = mapping

    def cmp(self, region1, region2):
        id1 = region1.ident
        id2 = region2.ident
        return cmp(self._mapping.get(id1), self._mapping.get(id2))

class TextZone(object):

    def __init__(self, tp, location, text, children=(), ident=None, discardGlyph=False):
        assert isinstance(tp, str)
        self.tp = tp
        assert isinstance(location, Polygon)
        self.location = location
        self.children = []
        for child in children:
            assert isinstance(child, TextZone)
            self.children += [child]
        assert (self.children and text is None) or isinstance(text, unicode)
        self.text = text
        self.ident = ident
        self.discardGlyph = discardGlyph

    def as_djvu(self, height, initial=None):
        if initial != None:
            self.location.plus(initial.location)
        tp = page_type_to_djvu_type(self.tp, djvu.const.TEXT_ZONE_REGION)
        result = [tp]
        result += self.location.as_djvu(height)
        if self.children:
            first = True
            for child in self.children:
                if first:
                    first = False
                    if initial != None and isinstance(child, TextZone):
                        processedChild = child.as_djvu(height, initial=initial)
                    else:
                        processedChild = child.as_djvu(height)
                else:
                    processedChild = child.as_djvu(height)
                result += [processedChild]
        else:
            assert self.text is not None
            if initial != None:
                self.text = initial.text + self.text
            result += [djvu.sexpr.Expression(self.text)]
        return djvu.sexpr.Expression(result)

    def sort_children_horizontal(self):
        def __cmp(child0, child1):
            return cmp(child0.location.x0, child1.location.x0)
        self.children.sort(cmp=__cmp)
    
    def sort_children_vertical(self):
        def __cmp(child0, child1):
            return cmp(child0.location.y0, child1.location.y0)
        self.children.sort(cmp=__cmp)
       
    def write_font(self, result, fontfamily):
        font = etree.Element('span',
	        {
		        'style': 'font-family: ' + fontfamily
	        }
        )
        for c in list(result):
            font.append(c)
        for c in list(font):
            result.remove(c)
        result.append(font)

    def as_hocr(self, **kwargs):
        initial = kwargs.get('initial')
        if initial != None:
            self.location.plus(initial.location)
        types = [self.tp]
        hocr_class = page_type_to_hocr_class(self.tp)
        if hocr_class is NotImplemented:
            raise NotImplementedError
        types += [hocr_class]
        if kwargs.get('extra_classes') and self.ident is not None:
            if re.match('^[a-zA-Z0-9_]+$', self.ident):
                types += ['ocrx_' + self.ident]
            else:
                logging.warning('%r cannot be used as an hOCR class' % self.ident)
        if self.tp in ['word', 'line']:
            self.sort_children_horizontal()
        else:
            self.sort_children_vertical()
        if self.tp == 'word' and initial != None:
            types += ['ocrx_drop_capital']
        bboxes = ''
        if self.tp == 'word' and (not self.discardGlyph) and self.children:
            bboxes = '; bboxes'
            first = True
            if initial != None:
                bboxes += ' ' + initial.location.to_string(**kwargs)
                first = False
            for child in self.children:
                if first:
                    first = False
                    bboxes += ' ' + child.location.to_string(**kwargs)
                else:
                    bboxes += ', ' + child.location.to_string(**kwargs)
        result = etree.Element('span',
            {
                'class': ' '.join(types),
                'title': self.location.as_hocr(**kwargs) + bboxes,
            }
        )
        if self.tp == 'glyph':
            assert(False)
        if self.tp == 'word' and self.discardGlyph:
            if initial != None:
                result.text = initial.text + self.text
            else:
                result.text = self.text
            result.tail = ' '
        elif self.tp == 'word':
            result.text = ''
            if initial != None:
                result.text += initial.text
            for child in self.children:
                result.text += child.text
            result.tail = ' '
        elif not self.children:
            tail = ' ' if self.tp == 'word' else ''
            prev_child = child = None
            first = True
            for subtext in unicode_split(self.text):
                if subtext.isspace():
                    if prev_child is None:
                        continue
                    prev_child.tail = ' '
                    continue
                child = etree.Element('span',
                    {
                        'class': 'ocrx_word ocrx_drop_capital' if first and initial != None else 'ocrx_word',
                        'title': self.location.as_hocr(**kwargs),
                    }
                )
                if first:
                    first = False
                    if initial != None:
                        child.text = initial.text + subtext
                    else:
                        child.text  = subtext
                else:
                    child.text = subtext
                result.append(child)
                prev_child = child
            if child is not None:
                child.tail = '' # wylaczone: spacja miedzy wierszami (patrz instrukcja.txt) - bo obsluguje to teraz program hocr2xces
        else:
            child = None
            first = True
            for child in self.children:
                if kwargs.get('toplevel') != None:
                    kwargs['toplevel'] = None
                    if kwargs.get('nonGothic') != None:
                        kwargs['gothic'] = not (self.ident in kwargs.get('nonGothic'))
                if isinstance(child, TextZone) and first and initial != None:
                    kwargs['initial'] = initial
                    child = child.as_hocr(**kwargs)
                else:
                    kwargs['initial'] = None
                    child = child.as_hocr(**kwargs)
                result.append(child)
                if first:
                    first = False
            if child is not None:
                if self.tp == 'line':
                    child.tail = '' # wylaczone: spacja miedzy wierszami - bo obsluguje to teraz program hocr2xces
                else:
                    child.tail = ''
            if self.tp == 'word':
                result.tail = ' ' # spacja miedzy slowami
            if self.tp == 'line' and kwargs.get('nonGothic') != None:
                if kwargs['gothic']:
                    self.write_font(result, kwargs['fontConf'][NOT_IN_FILE])
                else:
                    self.write_font(result, kwargs['fontConf'][IN_FILE])
        return result

    def __repr__(self):
        return 'TextZone(tp=%r, location=%r, text=%r, children=%r)' % (self.tp, self.location, self.text, self.children)

class Page(object):

    def __init__(self, ident, size, reading_order, children):
        assert isinstance(size, Point)
        self.ident = ident
        self.size = size
        self.children = []
        for child in children:
            assert isinstance(child, TextZone) or isinstance(child, Initial)
            self.children += [child]
        self.children.sort(cmp=reading_order.cmp)

    def as_djvu(self):
        result = [djvu.const.TEXT_ZONE_PAGE, 0, 0, self.size.x, self.size.y]
        lastInitial = None
        for child in self.children:
            if isinstance(child, Initial):
                lastInitial = child
            else:
                if lastInitial != None:
                    if isinstance(child, TextZone):
                        processedChild = child.as_djvu(height=self.size.y, initial=lastInitial)
                    lastInitial = None
                else:
                    processedChild = child.as_djvu(height=self.size.y)
                result += [processedChild]
        return djvu.sexpr.Expression(result)

    def as_hocr(self, **kwargs):
        types = ['ocr_page']
        if kwargs.get('extra_classes') and self.ident is not None:
            if re.match('^[a-zA-Z0-9_]+$', self.ident):
                types += ['ocrx_' + self.ident]
            else:
                logging.warning('%r cannot be used as an hOCR class' % self.ident)
        result = etree.Element('div',
            {
                'class': ' '.join(types),
                'title': 'bbox 0 0 %d %d' % (self.size.x, self.size.y)
            }
        )
        child = None
        lastInitial = None
        for child in self.children:
            if isinstance(child, Initial):
                lastInitial = child
            else:
                if lastInitial != None:
                    kwargs['initial'] = lastInitial
                    lastInitial = None
                else:
                    kwargs['initial'] = None
                kwargs['toplevel'] = True
                child = child.as_hocr(**kwargs)
                child.tail = '\n'
                result.append(child)
        result.text = result.tail = '\n'
        return result

    def __repr__(self):
        return 'Page(size=%r, children=%r)' % (self.size, self.children)

page_ns = 'http://schema.primaresearch.org/PAGE/gts/pagecontent/2010-03-19'
page_ns_re = re.compile('^{%s}(.*)$' % re.escape(page_ns)).match

class ParseError(SyntaxError):
    pass

class Initial(object):

    def __init__(self, text, location, ident=None):
        self.text = text
        self.location = location
        self.ident = ident

class Parser(object):

    def create_Creator(self, xml_element, *args): pass
    def create_Created(self, xml_element, *args): pass
    def create_LastChange(self, xml_element, *args): pass
    def create_Metadata(self, xml_element, *args): pass

    def create_RegionRefIndexed(self, xml_element, *args):
        ident = xml_element.get('regionRef')
        order = int(xml_element.get('index'), 10)
        return {ident: order}

    def create_OrderedGroup(self, xml_element, *args):
        result = {}
        for arg in args:
            result.update(arg)
        return result

    def create_UnorderedGroup(self, xml_element, *args):
        result = {}
        for arg in args:
            result.update(arg)
        return result

    def create_ReadingOrder(self, xml_element, *args):
        [mapping] = args
        return ReadingOrder(mapping)

    def create_Point(self, xml_element):
        x = int(xml_element.get('x'))
        y = int(xml_element.get('y'))
        return Point(x, y)

    def create_Coords(self, xml_element, *args):
        return Polygon(args)

    def create_PlainText(self, xml_element):
        if (xml_element.text or '') != '':
            raise ParseError('<PlainText> element without any text')
        return None

    def create_Unicode(self, xml_element):
        return unicode(xml_element.text or '')

    def create_TextEquiv(self, xml_element, arg):
        return arg

    def create_Glyph(self, xml_element, location, text):
        return TextZone('glyph', location, text)

    def log_TableRegion(self, xml_element):
        ident = xml_element.get('id')
        if ident:
            logging.debug('- processing TableRegion %s', ident)
        else:
            logging.debug('- processing TableRegion without an id')

    def create_TableRegion(self, xml_element, location):
        logging.warning('  don\'t know what to do with TableRegion, ignoring')

    def log_TextRegion(self, xml_element):
        ident = xml_element.get('id')
        if ident:
            logging.debug('- processing TextRegion %s', ident)
        else:
            logging.debug('- processing TextRegion without an id')

    def create_TextRegion(self, xml_element, location, *children):
        ident = xml_element.get('id')
        tp = xml_element.get('type')
        if tp is None:
            logging.warning('  TextRegion %s doesn\'t have any type', ident or 'without an id')
            tp = 'anonymous'
        if len(children) == 0:
            text = u''
            logging.warning('  TextRegion %s doesn\'t contain any text', ident or 'without an id')
        elif isinstance(children[-1], unicode):
            text = children[-1]
            if self.join_lines:
                text = re.compile(u'\N{non-breaking hyphen}(\r?\n|$)', re.UNICODE).sub('', text)
            children = children[:-1]
        else:
            text = None
        if tp == 'drop-capital':
            return Initial(text, location, ident)
        else:
            return TextZone(tp, location, text, children, ident)

    def create_TextLine(self, xml_element, location, *children):
        if len(children) == 0:
            logging.warning('  TextLine doesn\'t contain any text')
            text = u''
            children = []
        elif isinstance(children[-1], unicode):
            text = children[-1]
            children = children[:-1]
        else:
            text = None
        return TextZone('line', location, text, children)

    def create_Word(self, xml_element, location, *children):
        if len(children) == 0:
            logging.warning('  Word doesn\'t contain any text')
            text = u''
            children = []
        elif isinstance(children[-1], unicode):
            text = children[-1]
            children = children[:-1]
        else:
            text = None
        return TextZone('word', location, text, children, discardGlyph=('Glyph' in self.discard))

    def create_GraphicRegion(self, xml_element, location):
        pass

    def create_ImageRegion(self, xml_element, location):
        pass

    def create_SeparatorRegion(self, xml_element, location):
        pass

    def create_Page(self, xml_element, *children):
        ident = xml_element.get('imageFilename') or ''
        match = re.match('^[a-zA-Z0-9_]+', ident)
        if match:
            ident = match.group(0)
        else:
            ident = None
        if len(children) > 0 and isinstance(children[0], ReadingOrder):
            reading_order = children[0]
            children = children[1:]
        else:
            reading_order = ReadingOrder({})
        width = int(xml_element.get('imageWidth'))
        height = int(xml_element.get('imageHeight'))
        size = Point(width, height)
        return Page(ident, size, reading_order, children)

    def create_PcGts(self, xml_element, page):
        return page

    def __init__(self, discard, join_lines, skip_unknown_elements=False):
        self.discard = discard
        self.join_lines = bool(join_lines)
        self.skip_unknown_elements = bool(skip_unknown_elements)

    def parse(self, stream):
        stack = [[]]
        for event, element in etree.iterparse(stream, events=('start','end')):
            match = page_ns_re(element.tag)
            if match is None:
                raise ParseError('Unknown element: %s' % element.tag)
            tag = match.group(1)
            if event == 'start':
                try:
                    log_function = globals()['log_%s' % tag]
                except KeyError:
                    pass
                else:
                    log_function(element)
                stack += [[]]
            elif event == 'end':
                if tag in self.discard:
                    stack.pop()
                    continue
                try:
                    constructor = getattr(self, 'create_%s' % tag)
                except AttributeError:
                    if self.skip_unknown_elements:
                        logging.warning('- skipping unknown element %s', tag)
                        stack.pop()
                        continue
                    else:
                        raise NotImplementedError('Don\'t know what to do with element %s' % tag)
                element = constructor(element, *stack.pop())
                if element is not None:
                    stack[-1] += [element]
        [[page]] = stack
        return page

def unicode_split(text, locale=icu.Locale('eng')):
    # Treat REPLACEMENT CHARACTER and all PUA characters as letters:
    icu_text = re.compile(u'[\N{REPLACEMENT CHARACTER}\uE000-\uF8FF]', re.UNICODE).sub('x', text)
    icu_text = icu.UnicodeString(icu_text)
    iterator = icu.BreakIterator.createWordInstance(locale)
    iterator.setText(icu_text)
    i = 0
    for j in iterator:
        subtext = text[i:j]
        yield subtext
        i = j

def print_element(element, output=sys.stdout, encoding='UTF-8'):
    encoding = encoding.lower()
    etree.ElementTree(element).write(output, encoding)

def parse(fontFile):
    nonGothic = []
    if not os.path.exists(fontFile):
        return nonGothic
    f = open(fontFile)
    for line in f:
        nonGothic.append(line.strip())
    f.close()
    return nonGothic

def parse_configuration(confFile):
    conf = []
    f = open(confFile)
    for line in f:
        if line == "\n":
            continue
        conf.append(line[:-1])
    f.close()
    return conf

def main():
    logging.basicConfig(level=logging.INFO, format='%(message)s')
    parser = argparse.ArgumentParser()
    parser.add_argument('-F', '--output-format', choices=('djvused', 'hocr'), default='djvused', help='set output format')
    parser.add_argument('-p', '--page', type=int, default=1, metavar='N', help='start page numering from N (djvused output only)')
    parser.add_argument('--extra-hocr-classes', action='store_true', help='add hOCR classes corresponding to every PAGE document and to every PAGE region')
    parser.add_argument('--discard', metavar='ELEMENT', action='append', help='discard contents of these XML elements')
    parser.add_argument('--join-lines', action='store_true', help='join lines on NON-BREAKING HYPHEN characters')
    parser.add_argument('--verbose', action='store_true', help='more informational messages')
    parser.add_argument('--skip-unknown-elements', action='store_true', help='skip over elements that are unknown to the parser')
    parser.add_argument('--fonts', metavar='FILE', default=None, help='write information about fonts from given file')
    parser.add_argument('--font-config-file', metavar='FILE', default=None, help='file with configuration of font information')
    parser.add_argument('input_files', metavar='FILE', nargs='+', help='XML file to convert')
    options = parser.parse_args()
    options.discard = frozenset(options.discard or ())
    if options.verbose:
        logging.getLogger().setLevel(logging.DEBUG)
    parser = Parser(
        discard=options.discard,
        join_lines=options.join_lines,
        skip_unknown_elements=options.skip_unknown_elements
    )
    conf = []
    if options.fonts != None:
        if options.font_config_file == None:
            sys.stderr.write('No font configuration file given\n')
            exit(-1)
        conf = parse_configuration(options.font_config_file)
    if options.output_format == 'djvused':
        for nth, filename in enumerate(options.input_files, options.page):
            logging.info('Processing %s', filename)
            page = parser.parse(filename)
            print 'select %d' % nth
            print 'set-txt'
            if page.children:
                print page.as_djvu()
            print '.'
    else:
        sys.stdout.write(hocr_header)
        for filename in options.input_files:
            logging.info('Processing %s', filename)
            page = parser.parse(filename)
            nonGothic = None
            if options.fonts != None:
                nonGothic = parse(options.fonts)
            print_element(page.as_hocr(extra_classes=options.extra_hocr_classes, nonGothic=nonGothic, fontConf=conf))
        sys.stdout.write(hocr_footer)

if __name__ == '__main__':
    main()

# vim:ts=4 sw=4 et

